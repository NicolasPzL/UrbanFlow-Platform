-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public.audit_log
(
    log_id bigserial NOT NULL,
    usuario_id integer,
    accion character varying(255) COLLATE pg_catalog."default" NOT NULL,
    detalles jsonb,
    timestamp_log timestamp with time zone NOT NULL DEFAULT now(),
    CONSTRAINT audit_log_pkey PRIMARY KEY (log_id)
);

CREATE TABLE IF NOT EXISTS public.auditoria
(
    auditoria_id bigserial NOT NULL,
    usuario_id integer,
    accion character varying(100) COLLATE pg_catalog."default" NOT NULL,
    recurso character varying(255) COLLATE pg_catalog."default" NOT NULL,
    metodo_http character varying(10) COLLATE pg_catalog."default" NOT NULL,
    usuario_email character varying(100) COLLATE pg_catalog."default",
    usuario_rol character varying(50) COLLATE pg_catalog."default",
    ip_address inet,
    user_agent text COLLATE pg_catalog."default",
    codigo_respuesta integer NOT NULL,
    exito boolean NOT NULL DEFAULT true,
    duracion_ms integer,
    datos_adicionales jsonb,
    timestamp_auditoria timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT auditoria_pkey PRIMARY KEY (auditoria_id)
);

COMMENT ON TABLE public.auditoria
    IS 'Tabla de auditoría para registrar acciones del sistema UrbanFlow';

COMMENT ON COLUMN public.auditoria.auditoria_id
    IS 'ID único de cada registro de auditoría';

COMMENT ON COLUMN public.auditoria.usuario_id
    IS 'ID del usuario que realizó la acción';

COMMENT ON COLUMN public.auditoria.accion
    IS 'Tipo de acción (LOGIN, CREAR_USUARIO, etc.)';

COMMENT ON COLUMN public.auditoria.recurso
    IS 'Endpoint afectado (/api/users, etc.)';

COMMENT ON COLUMN public.auditoria.datos_adicionales
    IS 'Información adicional en formato JSON';

CREATE TABLE IF NOT EXISTS public.cabina_estado_hist
(
    hist_id bigserial NOT NULL,
    cabina_id integer NOT NULL,
    estado character varying(20) COLLATE pg_catalog."default" NOT NULL,
    timestamp_inicio timestamp with time zone NOT NULL DEFAULT now(),
    timestamp_fin timestamp with time zone,
    CONSTRAINT cabina_estado_hist_pkey PRIMARY KEY (hist_id)
);

CREATE TABLE IF NOT EXISTS public.cabinas
(
    cabina_id integer NOT NULL,
    codigo_interno character varying(20) COLLATE pg_catalog."default" NOT NULL,
    fecha_fabricacion date,
    estado_actual character varying(20) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT cabinas_pkey PRIMARY KEY (cabina_id),
    CONSTRAINT cabinas_codigo_interno_key UNIQUE (codigo_interno)
);

CREATE TABLE IF NOT EXISTS public.estaciones
(
    estacion_id serial NOT NULL,
    linea_id integer NOT NULL,
    nombre character varying(100) COLLATE pg_catalog."default" NOT NULL,
    tipo character varying(20) COLLATE pg_catalog."default" NOT NULL,
    latitud numeric(9, 6) NOT NULL,
    longitud numeric(9, 6) NOT NULL,
    altitud_m numeric(8, 2),
    estado_operativo character varying(20) COLLATE pg_catalog."default" DEFAULT 'operativa'::character varying,
    CONSTRAINT estaciones_pkey PRIMARY KEY (estacion_id)
);

CREATE TABLE IF NOT EXISTS public.eventos_operativos
(
    evento_id serial NOT NULL,
    tipo_evento character varying(50) COLLATE pg_catalog."default" NOT NULL,
    descripcion text COLLATE pg_catalog."default",
    severidad character varying(20) COLLATE pg_catalog."default",
    ts_inicio timestamp with time zone NOT NULL,
    ts_fin timestamp with time zone,
    linea_id integer,
    estacion_id integer,
    CONSTRAINT eventos_operativos_pkey PRIMARY KEY (evento_id)
);

CREATE TABLE IF NOT EXISTS public.lineas
(
    linea_id serial NOT NULL,
    nombre character varying(100) COLLATE pg_catalog."default" NOT NULL,
    descripcion text COLLATE pg_catalog."default",
    longitud_km numeric(5, 2),
    estado_operativo character varying(20) COLLATE pg_catalog."default" DEFAULT 'operativa'::character varying,
    CONSTRAINT lineas_pkey PRIMARY KEY (linea_id),
    CONSTRAINT lineas_nombre_key UNIQUE (nombre)
);

CREATE TABLE IF NOT EXISTS public.mediciones
(
    medicion_id bigserial NOT NULL,
    sensor_id integer NOT NULL,
    "timestamp" timestamp with time zone NOT NULL,
    latitud numeric(9, 6),
    longitud numeric(9, 6),
    altitud numeric(8, 2),
    velocidad numeric(5, 2),
    rms numeric(8, 4),
    kurtosis numeric(8, 4),
    skewness numeric(8, 4),
    zcr numeric(8, 4),
    pico numeric(8, 4),
    crest_factor numeric(8, 4),
    frecuencia_media numeric(8, 4),
    frecuencia_dominante numeric(8, 4),
    amplitud_max_espectral numeric(8, 4),
    energia_banda_1 numeric(8, 4),
    energia_banda_2 numeric(8, 4),
    energia_banda_3 numeric(8, 4),
    estado_procesado character varying(20) COLLATE pg_catalog."default",
    CONSTRAINT mediciones_pkey PRIMARY KEY (medicion_id)
);

CREATE TABLE IF NOT EXISTS public.modelos_ml
(
    modelo_id serial NOT NULL,
    nombre character varying(100) COLLATE pg_catalog."default" NOT NULL,
    version character varying(20) COLLATE pg_catalog."default" NOT NULL,
    framework character varying(50) COLLATE pg_catalog."default",
    fecha_entrenamiento date,
    descripcion text COLLATE pg_catalog."default",
    CONSTRAINT modelos_ml_pkey PRIMARY KEY (modelo_id),
    CONSTRAINT modelos_ml_nombre_version_key UNIQUE (nombre, version)
);

CREATE TABLE IF NOT EXISTS public.ordenes_trabajo
(
    ot_id serial NOT NULL,
    cabina_id integer,
    creada_por_usuario_id integer,
    tipo character varying(20) COLLATE pg_catalog."default" NOT NULL,
    estado character varying(20) COLLATE pg_catalog."default" NOT NULL DEFAULT 'creada'::character varying,
    prioridad character varying(20) COLLATE pg_catalog."default" DEFAULT 'media'::character varying,
    descripcion text COLLATE pg_catalog."default" NOT NULL,
    ts_creacion timestamp with time zone NOT NULL DEFAULT now(),
    ts_finalizacion timestamp with time zone,
    CONSTRAINT ordenes_trabajo_pkey PRIMARY KEY (ot_id)
);

CREATE TABLE IF NOT EXISTS public.predicciones
(
    prediccion_id bigserial NOT NULL,
    medicion_id bigint NOT NULL,
    modelo_id integer NOT NULL,
    clase_predicha character varying(20) COLLATE pg_catalog."default" NOT NULL,
    probabilidades jsonb,
    timestamp_prediccion timestamp with time zone NOT NULL DEFAULT now(),
    CONSTRAINT predicciones_pkey PRIMARY KEY (prediccion_id)
);

CREATE TABLE IF NOT EXISTS public.rol_usuario
(
    usuario_id integer NOT NULL,
    rol_id integer NOT NULL,
    CONSTRAINT rol_usuario_pkey PRIMARY KEY (usuario_id, rol_id)
);

CREATE TABLE IF NOT EXISTS public.roles
(
    rol_id serial NOT NULL,
    nombre_rol character varying(50) COLLATE pg_catalog."default" NOT NULL,
    descripcion text COLLATE pg_catalog."default",
    is_active boolean NOT NULL DEFAULT true,
    creado_en timestamp with time zone NOT NULL DEFAULT now(),
    actualizado_en timestamp with time zone NOT NULL DEFAULT now(),
    deleted_at timestamp with time zone,
    CONSTRAINT roles_pkey PRIMARY KEY (rol_id),
    CONSTRAINT roles_nombre_rol_key UNIQUE (nombre_rol)
);

CREATE TABLE IF NOT EXISTS public.sensores
(
    sensor_id integer NOT NULL,
    cabina_id integer NOT NULL,
    modelo character varying(50) COLLATE pg_catalog."default",
    version_firmware character varying(20) COLLATE pg_catalog."default",
    fecha_instalacion date,
    CONSTRAINT sensores_pkey PRIMARY KEY (sensor_id),
    CONSTRAINT sensores_cabina_id_key UNIQUE (cabina_id)
);

CREATE TABLE IF NOT EXISTS public.tramos
(
    tramo_id serial NOT NULL,
    linea_id integer NOT NULL,
    estacion_origen_id integer NOT NULL,
    estacion_destino_id integer NOT NULL,
    longitud_m numeric(8, 2),
    pendiente_porcentaje numeric(5, 2),
    CONSTRAINT tramos_pkey PRIMARY KEY (tramo_id)
);

CREATE TABLE IF NOT EXISTS public.usuarios
(
    usuario_id serial NOT NULL,
    nombre character varying(100) COLLATE pg_catalog."default" NOT NULL,
    correo character varying(100) COLLATE pg_catalog."default" NOT NULL,
    password_hash character varying(255) COLLATE pg_catalog."default" NOT NULL,
    rol character varying(50) COLLATE pg_catalog."default" NOT NULL DEFAULT 'usuario'::character varying,
    is_active boolean NOT NULL DEFAULT true,
    creado_en timestamp with time zone NOT NULL DEFAULT now(),
    actualizado_en timestamp with time zone NOT NULL DEFAULT now(),
    deleted_at timestamp with time zone,
    last_login_at timestamp with time zone,
    password_updated_at timestamp with time zone,
    must_change_password boolean NOT NULL DEFAULT false,
    failed_attempts integer NOT NULL DEFAULT 0,
    locked_until timestamp with time zone,
    fecha_creacion timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT usuarios_pkey PRIMARY KEY (usuario_id),
    CONSTRAINT usuarios_correo_key UNIQUE (correo)
);

ALTER TABLE IF EXISTS public.audit_log
    ADD CONSTRAINT audit_log_usuario_id_fkey FOREIGN KEY (usuario_id)
    REFERENCES public.usuarios (usuario_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL;


ALTER TABLE IF EXISTS public.auditoria
    ADD CONSTRAINT auditoria_usuario_id_fkey FOREIGN KEY (usuario_id)
    REFERENCES public.usuarios (usuario_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL;
CREATE INDEX IF NOT EXISTS idx_auditoria_usuario
    ON public.auditoria(usuario_id);


ALTER TABLE IF EXISTS public.cabina_estado_hist
    ADD CONSTRAINT cabina_estado_hist_cabina_id_fkey FOREIGN KEY (cabina_id)
    REFERENCES public.cabinas (cabina_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.estaciones
    ADD CONSTRAINT estaciones_linea_id_fkey FOREIGN KEY (linea_id)
    REFERENCES public.lineas (linea_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL;


ALTER TABLE IF EXISTS public.eventos_operativos
    ADD CONSTRAINT eventos_operativos_estacion_id_fkey FOREIGN KEY (estacion_id)
    REFERENCES public.estaciones (estacion_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.eventos_operativos
    ADD CONSTRAINT eventos_operativos_linea_id_fkey FOREIGN KEY (linea_id)
    REFERENCES public.lineas (linea_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.mediciones
    ADD CONSTRAINT fk_sensor FOREIGN KEY (sensor_id)
    REFERENCES public.sensores (sensor_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.ordenes_trabajo
    ADD CONSTRAINT ordenes_trabajo_cabina_id_fkey FOREIGN KEY (cabina_id)
    REFERENCES public.cabinas (cabina_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.ordenes_trabajo
    ADD CONSTRAINT ordenes_trabajo_creada_por_usuario_id_fkey FOREIGN KEY (creada_por_usuario_id)
    REFERENCES public.usuarios (usuario_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.predicciones
    ADD CONSTRAINT predicciones_medicion_id_fkey FOREIGN KEY (medicion_id)
    REFERENCES public.mediciones (medicion_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.predicciones
    ADD CONSTRAINT predicciones_modelo_id_fkey FOREIGN KEY (modelo_id)
    REFERENCES public.modelos_ml (modelo_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.rol_usuario
    ADD CONSTRAINT fk_rol FOREIGN KEY (rol_id)
    REFERENCES public.roles (rol_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE RESTRICT;


ALTER TABLE IF EXISTS public.rol_usuario
    ADD CONSTRAINT fk_usuario FOREIGN KEY (usuario_id)
    REFERENCES public.usuarios (usuario_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.sensores
    ADD CONSTRAINT fk_cabina FOREIGN KEY (cabina_id)
    REFERENCES public.cabinas (cabina_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS sensores_cabina_id_key
    ON public.sensores(cabina_id);


ALTER TABLE IF EXISTS public.tramos
    ADD CONSTRAINT tramos_estacion_destino_id_fkey FOREIGN KEY (estacion_destino_id)
    REFERENCES public.estaciones (estacion_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.tramos
    ADD CONSTRAINT tramos_estacion_origen_id_fkey FOREIGN KEY (estacion_origen_id)
    REFERENCES public.estaciones (estacion_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.tramos
    ADD CONSTRAINT tramos_linea_id_fkey FOREIGN KEY (linea_id)
    REFERENCES public.lineas (linea_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;

END;